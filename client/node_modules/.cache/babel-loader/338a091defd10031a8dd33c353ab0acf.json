{"ast":null,"code":"/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */\nexport class jsTPS_Transaction {\n  /**\r\n   * This method is called by jTPS when a transaction is executed.\r\n   */\n  doTransaction() {\n    console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n  }\n  /**\r\n   * This method is called by jTPS when a transaction is undone.\r\n   */\n\n\n  undoTransaction() {\n    console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n  }\n\n}\n/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */\n\nexport default class jsTPS {\n  constructor() {\n    // THE TRANSACTION STACK\n    this.transactions = []; // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n    // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n\n    this.numTransactions = 0; // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n    // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n    // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n    // AND STILL COULD BE REDONE.\n\n    this.mostRecentTransaction = -1; // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n    // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n    // MANAGE CONCURRENT UPDATES\n\n    this.performingDo = false;\n    this.performingUndo = false;\n  }\n  /**\r\n   * isPerformingDo\r\n   * \r\n   * Accessor method for getting a boolean representing whether or not\r\n   * a transaction is currently in the midst of a do/redo operation.\r\n   */\n\n\n  isPerformingDo() {\n    return this.performingDo;\n  }\n  /**\r\n   * isPerformingUndo\r\n   * \r\n   * Accessor method for getting a boolean representing whether or not\r\n   * a transaction is currently in the midst of an undo operation.\r\n   */\n\n\n  isPerformingUndo() {\n    return this.performingUndo;\n  }\n  /**\r\n   * getSize\r\n   * \r\n   * Accessor method for getting the number of transactions on the stack.\r\n   */\n\n\n  getSize() {\n    return this.transactions.length;\n  }\n  /**\r\n   * getRedoSize\r\n   * \r\n   * Method for getting the total number of transactions on the stack\r\n   * that can possibly be redone.\r\n   */\n\n\n  getRedoSize() {\n    return this.getSize() - this.mostRecentTransaction - 1;\n  }\n  /**\r\n   * getUndoSize\r\n   * \r\n   * Method for getting the total number of transactions on the stack\r\n   * that can possible be undone.\r\n   */\n\n\n  getUndoSize() {\n    return this.mostRecentTransaction + 1;\n  }\n  /**\r\n   * hasTransactionToRedo\r\n   * \r\n   * Method for getting a boolean representing whether or not\r\n   * there are transactions on the stack that can be redone.\r\n   */\n\n\n  hasTransactionToRedo() {\n    return this.mostRecentTransaction + 1 < this.numTransactions;\n  }\n  /**\r\n   * hasTransactionToUndo\r\n   * \r\n   * Method for getting a boolean representing whehter or not\r\n   * there are transactions on the stack that can be undone.\r\n   */\n\n\n  hasTransactionToUndo() {\n    return this.mostRecentTransaction >= 0;\n  }\n  /**\r\n   * addTransaction\r\n   * \r\n   * Method for adding a transaction to the TPS stack, note it\r\n   * also then does the transaction.\r\n   * \r\n   * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n   */\n\n\n  addTransaction(transaction) {\n    // ARE WE BRANCHING?\n    if (this.mostRecentTransaction < 0 || this.mostRecentTransaction < this.transactions.length - 1) {\n      for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n        this.transactions.splice(i, 1);\n      }\n\n      this.numTransactions = this.mostRecentTransaction + 2;\n    } else {\n      this.numTransactions++;\n    } // ADD THE TRANSACTION\n\n\n    this.transactions[this.mostRecentTransaction + 1] = transaction; // AND EXECUTE IT\n\n    this.doTransaction();\n  }\n  /**\r\n   * doTransaction\r\n   * \r\n   * Does the current transaction on the stack and advances the transaction\r\n   * counter. Note this function may be invoked as a result of either adding\r\n   * a transaction (which also does it), or redoing a transaction.\r\n   */\n\n\n  doTransaction() {\n    if (this.hasTransactionToRedo()) {\n      this.performingDo = true;\n      let transaction = this.transactions[this.mostRecentTransaction + 1];\n      transaction.doTransaction();\n      this.mostRecentTransaction++;\n      this.performingDo = false;\n    }\n  }\n  /**\r\n   * This function gets the most recently executed transaction on the \r\n   * TPS stack and undoes it, moving the TPS counter accordingly.\r\n   */\n\n\n  undoTransaction() {\n    if (this.hasTransactionToUndo()) {\n      this.performingUndo = true;\n      let transaction = this.transactions[this.mostRecentTransaction];\n      transaction.undoTransaction();\n      this.mostRecentTransaction--;\n      this.performingUndo = false;\n    }\n  }\n  /**\r\n   * clearAllTransactions\r\n   * \r\n   * Removes all the transactions from the TPS, leaving it with none.\r\n   */\n\n\n  clearAllTransactions() {\n    // REMOVE ALL THE TRANSACTIONS\n    this.transactions = []; // MAKE SURE TO RESET THE LOCATION OF THE\n    // TOP OF THE TPS STACK TOO\n\n    this.mostRecentTransaction = -1;\n    this.numTransactions = 0;\n  }\n  /**\r\n   * toString\r\n   * \r\n   * Builds and returns a textual represention of the full TPS and its stack.\r\n   */\n\n\n  toString() {\n    let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n    text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n    text += \"--Current Transaction Stack:\\n\";\n\n    for (let i = 0; i <= this.mostRecentTransaction; i++) {\n      let jT = this.transactions[i];\n      text += \"----\" + jT.toString() + \"\\n\";\n    }\n\n    return text;\n  }\n\n}","map":{"version":3,"sources":["F:/Documents/GitHub/Top5Lists_HW3/client/src/common/jsTPS.js"],"names":["jsTPS_Transaction","doTransaction","console","log","undoTransaction","jsTPS","constructor","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","isPerformingDo","isPerformingUndo","getSize","length","getRedoSize","getUndoSize","hasTransactionToRedo","hasTransactionToUndo","addTransaction","transaction","i","splice","clearAllTransactions","toString","text","jT"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAN,CAAwB;AAC3B;AACJ;AACA;AACIC,EAAAA,aAAa,GAAG;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,eAAe,GAAG;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACH;;AAb0B;AAgB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAME,KAAN,CAAY;AACvBC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,YAAL,GAAoB,EAApB,CAFU,CAIV;AACA;;AACA,SAAKC,eAAL,GAAuB,CAAvB,CANU,CAQV;AACA;AACA;AACA;;AACA,SAAKC,qBAAL,GAA6B,CAAC,CAA9B,CAZU,CAcV;AACA;AACA;;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKF,YAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKF,cAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKP,YAAL,CAAkBQ,MAAzB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKF,OAAL,KAAiB,KAAKL,qBAAtB,GAA8C,CAArD;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKR,qBAAL,GAA6B,CAApC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,oBAAoB,GAAG;AACnB,WAAQ,KAAKT,qBAAL,GAA2B,CAA5B,GAAiC,KAAKD,eAA7C;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIW,EAAAA,oBAAoB,GAAG;AACnB,WAAO,KAAKV,qBAAL,IAA8B,CAArC;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIW,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB;AACA,QAAK,KAAKZ,qBAAL,GAA6B,CAA9B,IACI,KAAKA,qBAAL,GAA8B,KAAKF,YAAL,CAAkBQ,MAAlB,GAA2B,CADjE,EACsE;AAC9D,WAAK,IAAIO,CAAC,GAAG,KAAKf,YAAL,CAAkBQ,MAAlB,GAA2B,CAAxC,EAA2CO,CAAC,GAAG,KAAKb,qBAApD,EAA2Ea,CAAC,EAA5E,EAAgF;AAC5E,aAAKf,YAAL,CAAkBgB,MAAlB,CAAyBD,CAAzB,EAA4B,CAA5B;AACH;;AACD,WAAKd,eAAL,GAAuB,KAAKC,qBAAL,GAA6B,CAApD;AACP,KAND,MAOK;AACD,WAAKD,eAAL;AACH,KAXuB,CAaxB;;;AACA,SAAKD,YAAL,CAAkB,KAAKE,qBAAL,GAA2B,CAA7C,IAAkDY,WAAlD,CAdwB,CAgBxB;;AACA,SAAKpB,aAAL;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKiB,oBAAL,EAAJ,EAAiC;AAC7B,WAAKR,YAAL,GAAoB,IAApB;AACA,UAAIW,WAAW,GAAG,KAAKd,YAAL,CAAkB,KAAKE,qBAAL,GAA2B,CAA7C,CAAlB;AACAY,MAAAA,WAAW,CAACpB,aAAZ;AACA,WAAKQ,qBAAL;AACA,WAAKC,YAAL,GAAoB,KAApB;AACH;AACJ;AAED;AACJ;AACA;AACA;;;AACIN,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKe,oBAAL,EAAJ,EAAiC;AAC7B,WAAKR,cAAL,GAAsB,IAAtB;AACA,UAAIU,WAAW,GAAG,KAAKd,YAAL,CAAkB,KAAKE,qBAAvB,CAAlB;AACAY,MAAAA,WAAW,CAACjB,eAAZ;AACA,WAAKK,qBAAL;AACA,WAAKE,cAAL,GAAsB,KAAtB;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AACIa,EAAAA,oBAAoB,GAAG;AACnB;AACA,SAAKjB,YAAL,GAAoB,EAApB,CAFmB,CAInB;AACA;;AACA,SAAKE,qBAAL,GAA6B,CAAC,CAA9B;AACA,SAAKD,eAAL,GAAuB,CAAvB;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIiB,EAAAA,QAAQ,GAAG;AACP,QAAIC,IAAI,GAAG,+BAA+B,KAAKlB,eAApC,GAAsD,IAAjE;AACAkB,IAAAA,IAAI,IAAI,+BAA+B,KAAKjB,qBAApC,GAA4D,IAApE;AACAiB,IAAAA,IAAI,IAAI,gCAAR;;AACA,SAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,KAAKb,qBAA1B,EAAiDa,CAAC,EAAlD,EAAsD;AAClD,UAAIK,EAAE,GAAG,KAAKpB,YAAL,CAAkBe,CAAlB,CAAT;AACAI,MAAAA,IAAI,IAAI,SAASC,EAAE,CAACF,QAAH,EAAT,GAAyB,IAAjC;AACH;;AACD,WAAOC,IAAP;AACH;;AAnLsB","sourcesContent":["/**\r\n * jsTPS_Transaction\r\n * \r\n * This provides the basic structure for a transaction class. Note to use\r\n * jsTPS one should create objects that define these two methods, doTransaction\r\n * and undoTransaction, which will update the application state accordingly.\r\n * \r\n * @author THE McKilla Gorilla (accept no imposters)\r\n * @version 1.0\r\n */\r\nexport class jsTPS_Transaction {\r\n    /**\r\n     * This method is called by jTPS when a transaction is executed.\r\n     */\r\n    doTransaction() {\r\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n    \r\n    /**\r\n     * This method is called by jTPS when a transaction is undone.\r\n     */\r\n    undoTransaction() {\r\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\r\n    }\r\n}\r\n\r\n/**\r\n * jsTPS\r\n * \r\n * This class serves as the Transaction Processing System. Note that it manages\r\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\r\n * state changes for the given application. Note that this TPS is not platform\r\n * specific as it is programmed in raw JavaScript.\r\n */\r\nexport default class jsTPS {\r\n    constructor() {\r\n        // THE TRANSACTION STACK\r\n        this.transactions = [];\r\n\r\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\r\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\r\n        this.numTransactions = 0;\r\n\r\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\r\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\r\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\r\n        // AND STILL COULD BE REDONE.\r\n        this.mostRecentTransaction = -1;\r\n\r\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\r\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\r\n        // MANAGE CONCURRENT UPDATES\r\n        this.performingDo = false;\r\n        this.performingUndo = false;\r\n    }\r\n\r\n    /**\r\n     * isPerformingDo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of a do/redo operation.\r\n     */\r\n    isPerformingDo() {\r\n        return this.performingDo;\r\n    }\r\n\r\n    /**\r\n     * isPerformingUndo\r\n     * \r\n     * Accessor method for getting a boolean representing whether or not\r\n     * a transaction is currently in the midst of an undo operation.\r\n     */\r\n    isPerformingUndo() {\r\n        return this.performingUndo;\r\n    }\r\n\r\n    /**\r\n     * getSize\r\n     * \r\n     * Accessor method for getting the number of transactions on the stack.\r\n     */\r\n    getSize() {\r\n        return this.transactions.length;\r\n    }\r\n\r\n    /**\r\n     * getRedoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possibly be redone.\r\n     */\r\n    getRedoSize() {\r\n        return this.getSize() - this.mostRecentTransaction - 1;\r\n    }\r\n\r\n    /**\r\n     * getUndoSize\r\n     * \r\n     * Method for getting the total number of transactions on the stack\r\n     * that can possible be undone.\r\n     */\r\n    getUndoSize() {\r\n        return this.mostRecentTransaction + 1;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToRedo\r\n     * \r\n     * Method for getting a boolean representing whether or not\r\n     * there are transactions on the stack that can be redone.\r\n     */\r\n    hasTransactionToRedo() {\r\n        return (this.mostRecentTransaction+1) < this.numTransactions;\r\n    }\r\n\r\n    /**\r\n     * hasTransactionToUndo\r\n     * \r\n     * Method for getting a boolean representing whehter or not\r\n     * there are transactions on the stack that can be undone.\r\n     */\r\n    hasTransactionToUndo() {\r\n        return this.mostRecentTransaction >= 0;\r\n    }\r\n\r\n    /**\r\n     * addTransaction\r\n     * \r\n     * Method for adding a transaction to the TPS stack, note it\r\n     * also then does the transaction.\r\n     * \r\n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\r\n     */\r\n    addTransaction(transaction) {\r\n        // ARE WE BRANCHING?\r\n        if ((this.mostRecentTransaction < 0) \r\n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\r\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\r\n                    this.transactions.splice(i, 1);\r\n                }\r\n                this.numTransactions = this.mostRecentTransaction + 2;\r\n        }\r\n        else {\r\n            this.numTransactions++;\r\n        }\r\n\r\n        // ADD THE TRANSACTION\r\n        this.transactions[this.mostRecentTransaction+1] = transaction;\r\n\r\n        // AND EXECUTE IT\r\n        this.doTransaction();\r\n    }\r\n\r\n    /**\r\n     * doTransaction\r\n     * \r\n     * Does the current transaction on the stack and advances the transaction\r\n     * counter. Note this function may be invoked as a result of either adding\r\n     * a transaction (which also does it), or redoing a transaction.\r\n     */\r\n    doTransaction() {\r\n        if (this.hasTransactionToRedo()) {\r\n            this.performingDo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction+1];\r\n            transaction.doTransaction();\r\n            this.mostRecentTransaction++;\r\n            this.performingDo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function gets the most recently executed transaction on the \r\n     * TPS stack and undoes it, moving the TPS counter accordingly.\r\n     */\r\n    undoTransaction() {\r\n        if (this.hasTransactionToUndo()) {\r\n            this.performingUndo = true;\r\n            let transaction = this.transactions[this.mostRecentTransaction];\r\n            transaction.undoTransaction();\r\n            this.mostRecentTransaction--;\r\n            this.performingUndo = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * clearAllTransactions\r\n     * \r\n     * Removes all the transactions from the TPS, leaving it with none.\r\n     */\r\n    clearAllTransactions() {\r\n        // REMOVE ALL THE TRANSACTIONS\r\n        this.transactions = [];\r\n        \r\n        // MAKE SURE TO RESET THE LOCATION OF THE\r\n        // TOP OF THE TPS STACK TOO\r\n        this.mostRecentTransaction = -1;      \r\n        this.numTransactions = 0; \r\n    }\r\n\r\n    /**\r\n     * toString\r\n     * \r\n     * Builds and returns a textual represention of the full TPS and its stack.\r\n     */\r\n    toString() {        \r\n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\r\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\r\n        text += \"--Current Transaction Stack:\\n\";\r\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\r\n            let jT = this.transactions[i];\r\n            text += \"----\" + jT.toString() + \"\\n\";\r\n        }\r\n        return text;        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}